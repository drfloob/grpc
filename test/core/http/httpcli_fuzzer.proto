// Copyright 2024 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package httpcli_fuzzer;

import "test/core/util/fuzzing_channel_args.proto";

// DO NOT SUBMIT: types to consider
// * on_done options for client
// * server behavior - see FakeUdpAndTcpServer. Probably an EE that intercepts connections.

// ------------ DO NOT SUBMIT: extract from api_fuzzer.proto
message Empty {}

message CredArtifact {
    oneof type {
        string custom = 1;
        int32 builtin = 2;
    }
}

message SslChannelCreds {
    CredArtifact root_certs = 1;
    CredArtifact private_key = 2;
    CredArtifact certs = 3;
}

message CompositeCallCreds {
    repeated CallCreds call_creds = 1;
}

message IAM {
    string auth_token = 1;
    string auth_selector = 2;
}

message CallCreds {
    oneof type {
        CompositeCallCreds composite_call_creds = 1;
        string access_token = 2;
        IAM iam = 3;
        Empty null = 4;
    }
}

message CompositeChannelCreds {
    ChannelCreds channel_creds = 1;
    CallCreds call_creds = 2;
}

message ChannelCreds {
    oneof type {
        SslChannelCreds ssl_channel_creds = 1;
        CompositeChannelCreds composite_channel_creds = 2;
        Empty null = 3;
    }
}

// ------------ DO NOT SUBMIT: extract from api_fuzzer.proto

message GrpcHttpHeader {
  string key = 1;
  string value = 2;
}

enum HttpVersion {
  HTTP_VERSION_UNKNOWN = 0;
  HTTP_VERSION_HTTP10 = 1;
  HTTP_VERSION_HTTP11 = 2;
  HTTP_VERSION_HTTP20 = 3;
}

message GrpcHttpRequest {
  // Method of the request (e.g. GET, POST)
  string method = 1;
  // The path of the resource to fetch (only used for parsed requests)
  string path = 2;
  // HTTP version to use
  HttpVersion version = 3;
  // Headers attached to the request
  repeated GrpcHttpHeader headers = 4;
  // Body contents; contents are NOT null-terminated
  bytes body = 5;
}

enum RequestType {
  REQUEST_TYPE_UNKNOWN = 0;
  REQUEST_TYPE_GET = 1;
  REQUEST_TYPE_POST = 2;
  REQUEST_TYPE_PUT = 3;
}

message Msg {
  RequestType request_type = 1;
  string host = 2;
  grpc.testing.FuzzingChannelArgs channel_args = 3;
  int32 timeout = 4;
  ChannelCreds creds = 5;
  GrpcHttpRequest request = 6;
}
