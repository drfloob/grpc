diff --git a/python/pip_install/extract_wheels/lib/bazel.py b/python/pip_install/extract_wheels/lib/bazel.py
index 7a91191..27b0c7a 100644
--- a/python/pip_install/extract_wheels/lib/bazel.py
+++ b/python/pip_install/extract_wheels/lib/bazel.py
@@ -99,7 +99,7 @@ def generate_build_file_contents(
     data_exclude = [
         "*.whl",
         "**/*.py",
-        f"{WHEEL_ENTRY_POINT_PREFIX}*.py",
+        "{}*.py".format(WHEEL_ENTRY_POINT_PREFIX),
         "**/* *",
         "BUILD.bazel",
         "WORKSPACE",
@@ -354,7 +354,7 @@ def extract_wheel(
     directory_path = Path(directory)
     entry_points = []
     for name, entry_point in sorted(whl.entry_points().items()):
-        entry_point_script = f"{WHEEL_ENTRY_POINT_PREFIX}_{name}.py"
+        entry_point_script = "{}_{}.py".format(WHEEL_ENTRY_POINT_PREFIX, name)
         (directory_path / entry_point_script).write_text(generate_entry_point_contents(entry_point))
         entry_points.append(generate_entry_point_rule(
             entry_point_script,
@@ -373,5 +373,5 @@ def extract_wheel(
 
     if not incremental:
         os.remove(whl.path)
-        return f"//{directory}"
+        return "//{}".format(directory)
     return None
diff --git a/python/pip_install/pip_compile.py b/python/pip_install/pip_compile.py
index 278e848..db9a430 100644
--- a/python/pip_install/pip_compile.py
+++ b/python/pip_install/pip_compile.py
@@ -79,7 +79,7 @@ else:
             print(
                 "pip-compile exited with code 2. This means that pip-compile found "
                 "incompatible requirements or could not find a version that matches "
-                f"the install requirement in {requirements_in}.",
+                "the install requirement in {}.".format(requirements_in),
                 file=sys.stderr,
             )
             sys.exit(1)
@@ -100,7 +100,7 @@ else:
             sys.exit(0)
         else:
             print(
-                f"pip-compile unexpectedly exited with code {e.code}.",
+                "pip-compile unexpectedly exited with code {}.".format(e.code),
                 file=sys.stderr
             )
             sys.exit(1)
diff --git a/python/pip_install/pip_repository.bzl b/python/pip_install/pip_repository.bzl
index c3007e1..f8a9234 100644
--- a/python/pip_install/pip_repository.bzl
+++ b/python/pip_install/pip_repository.bzl
@@ -39,7 +39,8 @@ def _resolve_python_interpreter(rctx):
         if "/" not in python_interpreter:
             python_interpreter = rctx.which(python_interpreter)
         if not python_interpreter:
-            fail("python interpreter not found")
+            print("WARNING: python interpreter not found. Python targets will not be functional")
+            return ""
     return python_interpreter
 
 def _parse_optional_attrs(rctx, args):
@@ -93,13 +94,49 @@ def _parse_optional_attrs(rctx, args):
 
     return args
 
+def _generate_stub_requirements_bzl(rctx):
+    contents = """\
+def requirement(name):
+    return "@{repo}//:empty"
+""".format(repo=rctx.attr.name)
+    rctx.file("requirements.bzl", contents)
+
 _BUILD_FILE_CONTENTS = """\
 package(default_visibility = ["//visibility:public"])
 
 # Ensure the `requirements.bzl` source can be accessed by stardoc, since users load() from it
 exports_files(["requirements.bzl"])
+
+py_library(
+    name = "empty",
+    srcs = [],
+)
 """
 
+def _python_version_info(rctx, python_interpreter, info_index):
+    cmd = [
+        python_interpreter,
+        "-c",
+        "from __future__ import print_function; import sys; print(sys.version_info[{}])".format(info_index)
+    ]
+    result = rctx.execute(cmd)
+    if result.stderr or not result.stdout:
+      print("WARNING: Failed to get version info from {}".format(python_interpreter))
+      return None
+    return int(result.stdout.strip())
+
+def _python_version_supported(rctx, python_interpreter):
+    major_version = _python_version_info(rctx, python_interpreter, 0)
+    minor_version = _python_version_info(rctx, python_interpreter, 1)
+    if major_version == None or minor_version == None:
+        print("WARNING: Failed to get Python version of {}".format(python_interpreter))
+        return False
+    if (major_version != 3 or minor_version < 6):
+        print("WARNING: {} is of version {}.{}. This version is unsupported.".format(python_interpreter, major_version, minor_version))
+        return False
+    return True
+
+
 def _pip_repository_impl(rctx):
     python_interpreter = _resolve_python_interpreter(rctx)
 
@@ -109,6 +146,11 @@ def _pip_repository_impl(rctx):
     # We need a BUILD file to load the generated requirements.bzl
     rctx.file("BUILD.bazel", _BUILD_FILE_CONTENTS)
 
+    # Check if python interpreter has minimum required version.
+    if not python_interpreter or not _python_version_supported(rctx, python_interpreter):
+      _generate_stub_requirements_bzl(rctx)
+      return
+
     pypath = _construct_pypath(rctx)
 
     if rctx.attr.incremental:
