// Copyright 2024 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// Automatically generated by tools/codegen/core/gen_trace_flags.py
//

#ifndef GRPC_SRC_CORE_LIB_DEBUG_TRACE_H
#define GRPC_SRC_CORE_LIB_DEBUG_TRACE_H

#include <atomic>
#include <map>
#include <string>

#include "absl/strings/string_view.h"

#include <grpc/support/port_platform.h>

#include "src/core/lib/gprpp/no_destruct.h"

void grpc_tracer_init();
void grpc_tracer_shutdown(void);

namespace grpc_core {

class TraceFlag;
class TraceFlagList {
 public:
  static bool Set(absl::string_view name, bool enabled);
  static void Add(TraceFlag* flag);
  static void SaveTo(std::map<std::string, bool>& values);

 private:
  static void LogAllTracers();
  static TraceFlag* root_tracer_;
};

namespace testing {
void grpc_tracer_enable_flag(TraceFlag* flag);
}

class TraceFlag {
 public:
  TraceFlag(bool default_enabled, const char* name);
  // TraceFlag needs to be trivially destructible since it is used as global
  // variable.
  ~TraceFlag() = default;

  const char* name() const { return name_; }

// Use the symbol GRPC_USE_TRACERS to determine if tracers will be enabled in
// opt builds (tracers are always on in dbg builds). The default in OSS is for
// tracers to be on since we support binary distributions of gRPC for the
// wrapped language (wr don't want to force recompilation to get tracing).
// Internally, however, for performance reasons, we compile them out by
// default, since internal build systems make recompiling trivial.
//
// Prefer GRPC_TRACE_FLAG_ENABLED() macro instead of using enabled() directly.
#define GRPC_USE_TRACERS  // tracers on by default in OSS
#if defined(GRPC_USE_TRACERS) || !defined(NDEBUG)
  bool enabled() { return value_.load(std::memory_order_relaxed); }
#else
  bool enabled() { return false; }
#endif  // defined(GRPC_USE_TRACERS) || !defined(NDEBUG)

 private:
  friend void testing::grpc_tracer_enable_flag(TraceFlag* flag);
  friend class TraceFlagList;

  void set_enabled(bool enabled) {
    value_.store(enabled, std::memory_order_relaxed);
  }

  TraceFlag* next_tracer_;
  const char* const name_;
  std::atomic<bool> value_;
};

#define GRPC_TRACE_FLAG_ENABLED(f) GPR_UNLIKELY((f).enabled())

#ifndef NDEBUG
typedef TraceFlag DebugOnlyTraceFlag;
#else
class DebugOnlyTraceFlag {
 public:
  constexpr DebugOnlyTraceFlag(bool /*default_enabled*/, const char* /*name*/) {
  }
  constexpr bool enabled() const { return false; }
  constexpr const char* name() const { return "DebugOnlyTraceFlag"; }

 private:
  void set_enabled(bool /*enabled*/) {}
};
#endif

class SavedTraceFlags {
 public:
  SavedTraceFlags();
  void Restore();

 private:
  std::map<std::string, bool> values_;
};

namespace internal {
class LogSink : public std::streambuf {
 public:
  int overflow(int c) override { return c; }
};
}  // namespace internal

extern TraceFlag api_trace;
#define GRPC_API_LOG(level) \
  (api_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag auth_context_refcount_trace;
#define GRPC_AUTH_CONTEXT_REFCOUNT_LOG(level) \
  (auth_context_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag backend_metric_trace;
#define GRPC_BACKEND_METRIC_LOG(level) \
  (backend_metric_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag backend_metric_filter_trace;
#define GRPC_BACKEND_METRIC_FILTER_LOG(level) \
  (backend_metric_filter_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag bdp_estimator_trace;
#define GRPC_BDP_ESTIMATOR_LOG(level) \
  (bdp_estimator_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag call_trace;
#define GRPC_CALL_LOG(level) \
  (call_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag call_combiner_trace;
#define GRPC_CALL_COMBINER_LOG(level) \
  (call_combiner_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag call_error_trace;
#define GRPC_CALL_ERROR_LOG(level) \
  (call_error_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag call_refcount_trace;
#define GRPC_CALL_REFCOUNT_LOG(level) \
  (call_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag cares_address_sorting_trace;
#define GRPC_CARES_ADDRESS_SORTING_LOG(level) \
  (cares_address_sorting_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag cares_resolver_trace;
#define GRPC_CARES_RESOLVER_LOG(level) \
  (cares_resolver_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag cds_lb_trace;
#define GRPC_CDS_LB_LOG(level) \
  (cds_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag channel_trace;
#define GRPC_CHANNEL_LOG(level) \
  (channel_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag channel_stack_trace;
#define GRPC_CHANNEL_STACK_LOG(level) \
  (channel_stack_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag chaotic_good_trace;
#define GRPC_CHAOTIC_GOOD_LOG(level) \
  (chaotic_good_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag chttp2_hpack_parser_trace;
#define GRPC_CHTTP2_HPACK_PARSER_LOG(level) \
  (chttp2_hpack_parser_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag chttp2_new_stream_trace;
#define GRPC_CHTTP2_NEW_STREAM_LOG(level) \
  (chttp2_new_stream_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag client_channel_trace;
#define GRPC_CLIENT_CHANNEL_LOG(level) \
  (client_channel_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag client_channel_call_trace;
#define GRPC_CLIENT_CHANNEL_CALL_LOG(level) \
  (client_channel_call_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag client_channel_lb_call_trace;
#define GRPC_CLIENT_CHANNEL_LB_CALL_LOG(level) \
  (client_channel_lb_call_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag client_idle_filter_trace;
#define GRPC_CLIENT_IDLE_FILTER_LOG(level) \
  (client_idle_filter_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag closure_trace;
#define GRPC_CLOSURE_LOG(level) \
  (closure_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag combiner_trace;
#define GRPC_COMBINER_LOG(level) \
  (combiner_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag compression_trace;
#define GRPC_COMPRESSION_LOG(level) \
  (compression_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag connectivity_state_trace;
#define GRPC_CONNECTIVITY_STATE_LOG(level) \
  (connectivity_state_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag cq_refcount_trace;
#define GRPC_CQ_REFCOUNT_LOG(level) \
  (cq_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag cronet_trace;
#define GRPC_CRONET_LOG(level) \
  (cronet_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag dns_resolver_trace;
#define GRPC_DNS_RESOLVER_LOG(level) \
  (dns_resolver_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag environment_autodetect_trace;
#define GRPC_ENVIRONMENT_AUTODETECT_LOG(level) \
  (environment_autodetect_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag error_refcount_trace;
#define GRPC_ERROR_REFCOUNT_LOG(level) \
  (error_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag event_engine_trace;
#define GRPC_EVENT_ENGINE_LOG(level) \
  (event_engine_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag event_engine_client_channel_resolver_trace;
#define GRPC_EVENT_ENGINE_CLIENT_CHANNEL_RESOLVER_LOG(level) \
  (event_engine_client_channel_resolver_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag event_engine_dns_trace;
#define GRPC_EVENT_ENGINE_DNS_LOG(level) \
  (event_engine_dns_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag event_engine_endpoint_trace;
#define GRPC_EVENT_ENGINE_ENDPOINT_LOG(level) \
  (event_engine_endpoint_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag event_engine_endpoint_data_trace;
#define GRPC_EVENT_ENGINE_ENDPOINT_DATA_LOG(level) \
  (event_engine_endpoint_data_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag event_engine_poller_trace;
#define GRPC_EVENT_ENGINE_POLLER_LOG(level) \
  (event_engine_poller_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag executor_trace;
#define GRPC_EXECUTOR_LOG(level) \
  (executor_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag fault_injection_filter_trace;
#define GRPC_FAULT_INJECTION_FILTER_LOG(level) \
  (fault_injection_filter_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag fd_refcount_trace;
#define GRPC_FD_REFCOUNT_LOG(level) \
  (fd_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag fd_trace_trace;
#define GRPC_FD_TRACE_LOG(level) \
  (fd_trace_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag flowctl_trace;
#define GRPC_FLOWCTL_LOG(level) \
  (flowctl_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag fork_trace;
#define GRPC_FORK_LOG(level) \
  (fork_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag glb_trace;
#define GRPC_GLB_LOG(level) \
  (glb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag grpc_authz_api_trace;
#define GRPC_GRPC_AUTHZ_API_LOG(level) \
  (grpc_authz_api_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag handshaker_trace;
#define GRPC_HANDSHAKER_LOG(level) \
  (handshaker_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag health_check_client_trace;
#define GRPC_HEALTH_CHECK_CLIENT_LOG(level) \
  (health_check_client_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag http_trace;
#define GRPC_HTTP_LOG(level) \
  (http_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag http1_trace;
#define GRPC_HTTP1_LOG(level) \
  (http1_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag http2_ping_trace;
#define GRPC_HTTP2_PING_LOG(level) \
  (http2_ping_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag http2_stream_state_trace;
#define GRPC_HTTP2_STREAM_STATE_LOG(level) \
  (http2_stream_state_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag http_keepalive_trace;
#define GRPC_HTTP_KEEPALIVE_LOG(level) \
  (http_keepalive_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag inproc_trace;
#define GRPC_INPROC_LOG(level) \
  (inproc_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag lb_policy_refcount_trace;
#define GRPC_LB_POLICY_REFCOUNT_LOG(level) \
  (lb_policy_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag metadata_query_trace;
#define GRPC_METADATA_QUERY_LOG(level) \
  (metadata_query_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag op_failure_trace;
#define GRPC_OP_FAILURE_LOG(level) \
  (op_failure_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag orca_client_trace;
#define GRPC_ORCA_CLIENT_LOG(level) \
  (orca_client_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag outlier_detection_lb_trace;
#define GRPC_OUTLIER_DETECTION_LB_LOG(level) \
  (outlier_detection_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag party_state_trace;
#define GRPC_PARTY_STATE_LOG(level) \
  (party_state_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag pending_tags_trace;
#define GRPC_PENDING_TAGS_LOG(level) \
  (pending_tags_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag pick_first_trace;
#define GRPC_PICK_FIRST_LOG(level) \
  (pick_first_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag plugin_credentials_trace;
#define GRPC_PLUGIN_CREDENTIALS_LOG(level) \
  (plugin_credentials_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag polling_trace;
#define GRPC_POLLING_LOG(level) \
  (polling_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag polling_api_trace;
#define GRPC_POLLING_API_LOG(level) \
  (polling_api_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag priority_lb_trace;
#define GRPC_PRIORITY_LB_LOG(level) \
  (priority_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag promise_primitives_trace;
#define GRPC_PROMISE_PRIMITIVES_LOG(level) \
  (promise_primitives_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag queue_pluck_trace;
#define GRPC_QUEUE_PLUCK_LOG(level) \
  (queue_pluck_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag resolver_refcount_trace;
#define GRPC_RESOLVER_REFCOUNT_LOG(level) \
  (resolver_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag resource_quota_trace;
#define GRPC_RESOURCE_QUOTA_LOG(level) \
  (resource_quota_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag retry_trace;
#define GRPC_RETRY_LOG(level) \
  (retry_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag ring_hash_lb_trace;
#define GRPC_RING_HASH_LB_LOG(level) \
  (ring_hash_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag rls_lb_trace;
#define GRPC_RLS_LB_LOG(level) \
  (rls_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag round_robin_trace;
#define GRPC_ROUND_ROBIN_LOG(level) \
  (round_robin_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag secure_endpoint_trace;
#define GRPC_SECURE_ENDPOINT_LOG(level) \
  (secure_endpoint_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag security_connector_refcount_trace;
#define GRPC_SECURITY_CONNECTOR_REFCOUNT_LOG(level) \
  (security_connector_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag server_channel_trace;
#define GRPC_SERVER_CHANNEL_LOG(level) \
  (server_channel_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag slice_refcount_trace;
#define GRPC_SLICE_REFCOUNT_LOG(level) \
  (slice_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag stateful_session_filter_trace;
#define GRPC_STATEFUL_SESSION_FILTER_LOG(level) \
  (stateful_session_filter_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag stream_refcount_trace;
#define GRPC_STREAM_REFCOUNT_LOG(level) \
  (stream_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag subchannel_trace;
#define GRPC_SUBCHANNEL_LOG(level) \
  (subchannel_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag subchannel_pool_trace;
#define GRPC_SUBCHANNEL_POOL_LOG(level) \
  (subchannel_pool_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag subchannel_refcount_trace;
#define GRPC_SUBCHANNEL_REFCOUNT_LOG(level) \
  (subchannel_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag tcp_trace;
#define GRPC_TCP_LOG(level) \
  (tcp_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag timer_trace;
#define GRPC_TIMER_LOG(level) \
  (timer_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag timer_check_trace;
#define GRPC_TIMER_CHECK_LOG(level) \
  (timer_check_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag tsi_trace;
#define GRPC_TSI_LOG(level) \
  (tsi_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag weighted_round_robin_lb_trace;
#define GRPC_WEIGHTED_ROUND_ROBIN_LB_LOG(level) \
  (weighted_round_robin_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag weighted_target_lb_trace;
#define GRPC_WEIGHTED_TARGET_LB_LOG(level) \
  (weighted_target_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern DebugOnlyTraceFlag work_serializer_trace;
#define GRPC_WORK_SERIALIZER_LOG(level) \
  (work_serializer_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_client_trace;
#define GRPC_XDS_CLIENT_LOG(level) \
  (xds_client_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_client_refcount_trace;
#define GRPC_XDS_CLIENT_REFCOUNT_LOG(level) \
  (xds_client_refcount_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_cluster_impl_lb_trace;
#define GRPC_XDS_CLUSTER_IMPL_LB_LOG(level) \
  (xds_cluster_impl_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_cluster_manager_lb_trace;
#define GRPC_XDS_CLUSTER_MANAGER_LB_LOG(level) \
  (xds_cluster_manager_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_cluster_resource_type_test_trace;
#define GRPC_XDS_CLUSTER_RESOURCE_TYPE_TEST_LOG(level) \
  (xds_cluster_resource_type_test_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_common_types_test_trace;
#define GRPC_XDS_COMMON_TYPES_TEST_LOG(level) \
  (xds_common_types_test_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_endpoint_resource_type_test_trace;
#define GRPC_XDS_ENDPOINT_RESOURCE_TYPE_TEST_LOG(level) \
  (xds_endpoint_resource_type_test_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_listener_resource_type_test_trace;
#define GRPC_XDS_LISTENER_RESOURCE_TYPE_TEST_LOG(level) \
  (xds_listener_resource_type_test_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_override_host_lb_trace;
#define GRPC_XDS_OVERRIDE_HOST_LB_LOG(level) \
  (xds_override_host_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_resolver_trace;
#define GRPC_XDS_RESOLVER_LOG(level) \
  (xds_resolver_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_route_config_resource_type_test_trace;
#define GRPC_XDS_ROUTE_CONFIG_RESOURCE_TYPE_TEST_LOG(level) \
  (xds_route_config_resource_type_test_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_server_config_fetcher_trace;
#define GRPC_XDS_SERVER_CONFIG_FETCHER_LOG(level) \
  (xds_server_config_fetcher_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())
extern TraceFlag xds_wrr_locality_lb_trace;
#define GRPC_XDS_WRR_LOCALITY_LB_LOG(level) \
  (xds_wrr_locality_lb_trace.enabled() ? LOG(level) : NoDestructSingleton<LogSink>::Get())

}  // namespace grpc_core

#endif  // GRPC_SRC_CORE_LIB_DEBUG_TRACE_H